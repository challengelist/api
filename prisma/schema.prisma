// ◮◮◮ GENERATED BY AURORA ◮◮◮
datasource db {
  provider = "postgresql"
  url      = env("CL_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 Int      @id @default(autoincrement())
  profile            Player?
  groups             Group[]
  badges             Badge[]
  username           String   @unique
  password_hash      String
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now())
  api_key            String?  @unique
  permissions_grant  BigInt   @default(0)
  permissions_revoke BigInt   @default(0)

  @@map("accounts")
}

model Group {
  id                 Int       @id @default(autoincrement())
  name               String
  short_name         String
  priority           Int
  color              String    @default("#FFFFFF")
  background_color   String    @default("#000000")
  icon               String?
  permissions_grant  BigInt    @default(0)
  permissions_revoke BigInt    @default(0)
  accounts           Account[]

  @@map("groups")
}

model Player {
  id                   Int         @id @default(autoincrement())
  name                 String
  banned               Boolean     @default(false)
  account_id           Int?        @unique
  created_challenges   Challenge[] @relation("created_challenges")
  published_challenges Challenge[] @relation("published_challenges")
  verified_challenges  Challenge[] @relation("verified_challenges")
  completed_challenges Challenge[] @relation("completed_challenges")
  account              Account?    @relation(fields: [account_id], references: [id])

  @@map("players")
}

model Badge {
  id          Int             @id @default(autoincrement())
  name        String
  obtain_type BadgeObtainType
  owners      Account[]

  @@map("badges")
}

model Challenge {
  id           Int             @id @default(autoincrement())
  verifier_id  Int
  publisher_id Int
  verifier     Player          @relation("verified_challenges", fields: [verifier_id], references: [id])
  publisher    Player          @relation("published_challenges", fields: [publisher_id], references: [id])
  creators     Player[]        @relation("created_challenges")
  completers   Player[]        @relation("completed_challenges")
  name         String
  position     Int
  level_id     Int?
  fps          Int?
  status       ChallengeStatus @default(VISIBLE)

  @@map("challenge")
}

model Integration {
  id            Int             @id @default(autoincrement())
  type          IntegrationType
  account_id    Int
  access_token  String
  refresh_token String?
  token_type    String?
  expires_in    Int?
}

model Session {
  id            Int    @id @default(autoincrement())
  account_id    Int
  session_token String @unique
}

enum BadgeObtainType {
  POINTS
  POSITION
  SPECIAL
}

enum ChallengeStatus {
  HIDDEN
  REMOVED
  VISIBLE
}

enum IntegrationType {
  DISCORD
  GEOMETRY_DASH
}